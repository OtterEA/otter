## todo : 基于委托者判断，但凡需要安装的，都委托给ansible controller端
- block:
  - name: Check Helm Binary Package Exist for Multi-architecture
    stat: path={{ item }}
    register: helm_file_state
    with_items:
    - "{{ playbook_dir | dirname }}/files/bin/helm/x86_64/helm-v{{ HELM_VERSION }}.tgz"
    - "{{ playbook_dir | dirname }}/files/bin/helm/aarch64/helm-v{{ HELM_VERSION }}.tgz"
  
  - name: Helm Package Not Exist
    fail: msg="Helm Binary Package Not Exist"
    when: false in ( helm_file_state.results | map(attribute='stat.exists') | list )
  any_errors_fatal: true
  when: 
  - OTTER_MIXED_ENABLE | default(false) | bool == true
  - inventory_hostname == ansible_env['SSH_CLIENT'].split() | first   # just ansible controller run this block

- block:
  - name: Check Helm Binary Package Exist
    stat: path={{ playbook_dir | dirname }}/files/bin/helm/{{ ansible_architecture }}/helm-v{{ HELM_VERSION }}.tgz
    register: helm_file_state
  
  - name: Helm Binary Package Not Exist
    fail: msg="Helm Binary Package Not Exist"
    when: helm_file_state.stat.exists == false
  any_errors_fatal: true
  when: 
  - OTTER_MIXED_ENABLE | default(false) | bool == false
  - inventory_hostname == ansible_env['SSH_CLIENT'].split() | first   # just ansible controller run this block

# install helm3
- block:
  - name: Create Temp Directory for otter
    file: path=/tmp/otter/helm state=directory mode=0755 recurse=yes 

  - name: Unarchive Helm Binary Package
    unarchive: src={{ playbook_dir | dirname }}/files/bin/helm/{{ ansible_architecture }}/helm-v{{ HELM_VERSION }}.tgz dest=/tmp/otter/helm
  
  - name: Copy Helm Binary Files to /usr/bin/
    copy: src=/tmp/otter/helm/linux-{{ architecture[ansible_architecture] }}/helm dest=/usr/bin/helm remote_src=yes mode=0755
    vars:
      architecture: {'x86_64': 'amd64', 'aarch64': 'arm64'}
  any_errors_fatal: true