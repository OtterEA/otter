########## 内核参数优化 ##########
# name: 内核参数
# value: 内核参数值
# comment: 内核参数说明
KERNEL_PARAMETER:
- { name: "vm.swappiness", value: "0",comment: "关闭SWAP" }
- { name: 'net.bridge.bridge-nf-call-iptables', value: '1', comment: '' }
- { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' , comment: '' }



#- { name: 'net.ipv4.ip_forward', value: '1' , comment: '' }
#- { name: 'vm.max_map_count', value: '655360' , comment: '' }
#- { name: 'fs.file-max', value: '655360' , comment: '' }
#- { name: 'net.netfilter.nf_conntrack_max', value: '10485760', comment: '允许的最大跟踪连接条目，是在内核内存中 netfilter 可以同时处理的“任务”（连接跟踪条目）' }
#- { name: 'net.netfilter.nf_conntrack_tcp_timeout_established' , value: '300' , comment: '' }
#- { name: 'net.netfilter.nf_conntrack_buckets' , value: '655360' , comment: '哈希表大小（只读）（64位系统、8G内存默认 65536，16G翻倍，如此类推）'}
#- { name: 'net.core.netdev_max_backlog' , value: '10000' , comment: '每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目' }
#- { name: 'net.core.somaxconn' , value: '32768' , comment: '表示socket监听(listen)的backlog上限，也就是就是socket的监听队列(accept queue)，当一个tcp连接尚未被处理或建立时(半连接状态)，会保存在这个监听队列，默认为 128，在高并发场景下偏小，优化到 32768。参考 https://imroc.io/posts/kubernetes-overflow-and-drop/' }
#- { name: 'net.ipv4.tcp_max_syn_backlog' , value: '8096' , comment: '没有启用syncookies的情况下，syn queue(半连接队列)大小除了受somaxconn限制外，也受这个参数的限制，默认1024，优化到8096，避免在高并发场景下丢包' }
#- { name: 'fs.inotify.max_user_instances' , value: '8192' , comment: '表示同一用户同时最大可以创建的 inotify 实例 (每个实例可以有很多 watch)' }
#- { name: 'fs.file-max' , value: '2097152' , comment: 'max-file 表示系统级别的能够打开的文件句柄的数量， 一般如果遇到文件句柄达到上限时，会碰到Too many open files 或者 Socket/File: Can’t open so many files 等错误' }
#- { name: 'fs.inotify.max_user_watches' , value: '524288' , comment: '表示同一用户同时可以添加的watch数目（watch一般是针对目录，决定了同时同一用户可以监控的目录数量) 默认值 8192 在容器场景下偏小，在某些情况下可能会导致 inotify watch 数量耗尽，使得创建 Pod 不成功或者 kubelet 无法启动成功，将其优化到 524288' }
#- { name: 'net.core.bpf_jit_enable' , value: '1' , comment: '' }
#- { name: 'net.core.bpf_jit_harden' , value: '1' , comment: '' }
#- { name: 'net.core.bpf_jit_kallsyms' , value: '1' , comment: '' }
#- { name: 'net.core.dev_weight_tx_bias' , value: '1' , comment: '' }
#- { name: 'net.core.rmem_max' , value: '16777216' , comment: '' }
#- { name: 'net.core.wmem_max' , value: '16777216' , comment: '' }
#- { name: 'net.ipv4.tcp_rmem' , value: '4096 12582912 16777216' , comment: '' }
#- { name: 'net.ipv4.tcp_wmem' , value: '4096 12582912 16777216' , comment: '' }
#- { name: 'net.core.rps_sock_flow_entries' , value: '8192' , comment: '' }
#- { name: 'net.ipv4.neigh.default.gc_thresh1' , value: '2048' , comment: '以下三个参数是 arp 缓存的 gc 阀值，相比默认值提高了，当内核维护的 arp 表过于庞大时候，可以考虑优化下，避免在某些场景下arp缓存溢出导致网络超时，参考：https://k8s.imroc.io/avoid/cases/arp-cache-overflow-causes-healthcheck-failed,存在于 ARP 高速缓存中的最少层数，如果少于这个数，垃圾收集器将不会运行。缺省值是 128' }
#- { name: 'net.ipv4.neigh.default.gc_thresh2' , value: '4096' , comment: '保存在 ARP 高速缓存中的最多的记录软限制。垃圾收集器在开始收集前，允许记录数超过这个数字 5 秒。缺省值是 512' }
#- { name: 'net.ipv4.neigh.default.gc_thresh3' , value: '8192' , comment: '保存在 ARP 高速缓存中的最多记录的硬限制，一旦高速缓存中的数目高于此，垃圾收集器将马上运行。缺省值是 1024' }
#- { name: 'net.ipv4.tcp_max_orphans' , value: '32768' , comment: '' }
#- { name: 'net.ipv4.tcp_max_tw_buckets' , value: '32768' , comment: '' }
#- { name: 'vm.max_map_count' , value: '262144' , comment: '' }
#- { name: 'kernel.threads-max' , value: '30058' , comment: '' }
#- { name: 'net.bridge.bridge-nf-call-ip6tables' , value: '1' , comment: '' }
#- { name: 'net.bridge.bridge-nf-call-iptables' , value: '1' , comment: '' }
#- { name: 'net.ipv4.conf.all.rp_filter' , value: '1' , comment: '' }
#- { name: 'net.ipv4.ip_forward' , value: '1' , comment: '' }
##- { name: 'kernel.core_pattern' , value: 'core' , comment: '避免发生故障时没有 coredump' }  部分国产环境下会产生大量core文件，不配置该设置

############ 系统需要安装的基础软件 ###########
CENTOS7_SOFTWARE:
- bash-completion
- vim
- net-tools

CENTOS8_SOFTWARE:
- bash-completion
- vim
- net-tools