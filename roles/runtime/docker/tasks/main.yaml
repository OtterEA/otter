# check docker install package exist
- block:
  - name: Check Docker Binary Package Exist for Multi-architecture
    stat: path={{ item }}
    register: docker_file_state
    with_items:
    - "{{ playbook_dir | dirname }}/files/bin/docker/x86_64/docker-{{ DOCKER_VERSION }}.tgz"
    - "{{ playbook_dir | dirname }}/files/bin/docker/aarch64/docker-{{ DOCKER_VERSION }}.tgz"
  
  - name: Docker Binary Package Not Exist
    fail: msg="Docker Binary Package Not Exist"
    when: false in ( docker_file_state.results | map(attribute='stat.exists') | list )
  any_errors_fatal: true
  when: 
  - OTTER_MIXED_ENABLE | default(false) | bool == true
  - inventory_hostname == ansible_env['SSH_CLIENT'].split() | first   # just ansible controller run this block
# check result
#"msg": [
#    true, 
#    false
#]

# check docker install package exist
- block:
  - name: Check Docker Binary Package Exist
    stat: path={{ playbook_dir | dirname }}/files/bin/docker/{{ ansible_architecture }}/docker-{{ DOCKER_VERSION }}.tgz
    register: docker_file_state
  
  - name: Docker Binary Package Not Exist
    fail: msg="Docker Binary Package Not Exist"
    when: docker_file_state.stat.exists == false
  any_errors_fatal: true
  when: 
  - OTTER_MIXED_ENABLE | default(false) | bool == false
  - inventory_hostname == ansible_env['SSH_CLIENT'].split() | first   # just ansible controller run this block

# install docker
- block:
  - name: Insert Harbor Domain
    lineinfile:
      path: /etc/hosts
      line: '{{ HARBOR_IP }} {{ HARBOR_DOMAIN }}'
      state: present
    when: HARBOR_ENABLE|default(true)|bool == true

  - name: Create Temp Directory for otter
    file: path=/tmp/otter state=directory mode=0755 recurse=yes 

  - name: Unarchive Docker Binary Package
    unarchive: src={{ playbook_dir | dirname }}/files/bin/docker/{{ ansible_architecture }}/docker-{{ DOCKER_VERSION }}.tgz dest=/tmp/otter/ 
  
  - name: Get All Files of /tmp/otter
    find: paths=/tmp/otter/docker file_type=file 
    register: docker_binary_files
  
  - name: Copy Docker Binary Files to /usr/bin/
    copy: src={{ item.path }} dest=/usr/bin/{{ item.path | basename }} remote_src=yes mode=0755
    loop_control:
      label: "{{ item.path | basename }}"
    with_items: "{{ docker_binary_files.files }}"

  # fix: dest=/usr/lib/systemd/system/docker.service -=> /etc/systemd/system/docker.service ,ubuntu 18.04不存在/usr/lib/systemd/system/目录
  - name: Copy Docker Service Configuration
    copy: src=docker.service dest=/etc/systemd/system/docker.service force=yes

  - name: Create Docker Configuration Directory
    file: path=/etc/docker state=directory recurse=yes mode=0755

  - name: Create Docker Configuration
    template: src=daemon.json.j2 dest=/etc/docker/daemon.json force=yes
  
  # tips: 仅ansible 控制端不重启
  - name: Enable Docker Service Enable
    systemd: name=docker enabled=yes state=restarted daemon_reload=yes
    any_errors_fatal: true
    #when: inventory_hostname != ansible_env['SSH_CLIENT'].split() | first
  
  - name: Wait for Docker Run
    shell: systemctl is-active docker.service
    register: docker_status
    until: '"active" in docker_status.stdout'
    retries: 6
    delay: 10